import gql from 'graphql-tag';

const user = gql`
  extend type Query {
    me: User
    getUser(id: ID!): User
    getAllUsers(
      limit: Int = 100
      page: Int = 1
      sortDir: SortDirection = desc
      sortBy: SortableUserField = createdAt
      query: String
    ): UsersPaginationPayload!
  }

  extend type Mutation {
    createUser(input: CreateUserInput!): CreateUserPayload!
    updateUser(input: UpdateUserInput!): UpdateUserPayload!
    deleteUser(input: DeleteUserInput!): DeleteUserPayload!
    signUp(input: SignUpInput!): SignUpPayload!
    signIn(input: SignInInput!): SignInPayload!
    signOut: SignOutPayload
  }

  input CreateUserInput {
    email: String!
    name: String!
    lastName: String
    secondName: String
    phone: String
    role: String
  }

  type CreateUserPayload {
    success: Boolean!
    message: String!
    user: User
  }

  input UpdateUserInput {
    id: ID!
    name: String!
    lastName: String
    secondName: String
    email: String!
    phone: String!
    role: String!
  }

  type UpdateUserPayload {
    success: Boolean!
    message: String!
    user: User
  }

  input DeleteUserInput {
    id: ID!
  }

  type DeleteUserPayload {
    success: Boolean!
    message: String!
  }

  input SignUpInput {
    email: String!
    name: String!
    lastName: String
    secondName: String
    phone: String
    password: String!
  }

  type SignUpPayload {
    success: Boolean!
    message: String!
    user: User
  }

  input SignInInput {
    email: String!
    password: String!
  }

  type SignInPayload {
    success: Boolean!
    message: String!
    user: User
  }

  type SignOutPayload {
    success: Boolean!
    message: String!
  }

  enum SortableUserField {
    id
    email
    name
    lastName
    secondName
    phone
    role
    createdAt
  }

  type UsersPaginationPayload {
    docs: [User!]!
    totalDocs: Int!
    limit: Int!
    page: Int
    totalPages: Int!
    pagingCounter: Int
    nextPage: Int
    prevPage: Int
    hasNextPage: Boolean
    hasPrevPage: Boolean
  }

  type User {
    id: ID!
    itemId: Int!
    name: String!
    lastName: String
    secondName: String
    email: String!
    phone: String!
    role: String!
    createdAt: DateTime!
    updatedAt: DateTime!

    # fields generated by resolvers
    fullName: String!
    shortName: String!
    isAdmin: Boolean!
    isCustomer: Boolean!
    isSuper: Boolean!
    isContractor: Boolean!
    isDriver: Boolean!
    isHelper: Boolean!
    isBookkeeper: Boolean!
    isWarehouse: Boolean!
    isLogistician: Boolean!
    isManager: Boolean!
    isStage: Boolean!
  }
`;

export default user;
